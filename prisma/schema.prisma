// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AppointmentStatus {
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Users {
  id          Int         @id @default(autoincrement()) 
  email       String      @unique @db.VarChar(255)
  password    String      @db.VarChar(255)
  active      Boolean     @default(true)
  role        String      @db.VarChar(20)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  userDetails UserDetails? 
  appointmentsAsPatient  Appointments[] @relation("PatientAppointments")
  appointmentsAsDoctor    Appointments[] @relation("DoctorAppointments")
}

model UserDetails {
  id            Int         @id @default(autoincrement()) 
  userId        Int         @unique
  firstName     String      @db.VarChar(255)
  lastName      String      @db.VarChar(255)
  phoneNumber   String      @db.VarChar(255)
  birthDate     DateTime
  user          Users        @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model ServiceCategory {
  id            Int         @id @default(autoincrement())
  name          String      @unique
  description   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  services    Services[]
}

model Services {
  id              Int       @id @default(autoincrement())
  name            String    @unique
  description     String?
  price           Decimal   @default(0.00)
  categoryId      Int
  category        ServiceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  appointments    Appointments[]
}

model Appointments {
  id              Int                   @id @default(autoincrement())
  date            DateTime
  startTime       String                @db.VarChar(255)
  endTime         String                @db.VarChar(255)
  status          AppointmentStatus     @default(CONFIRMED)
  reason          String?               @db.VarChar(1000)
  notes           String?               @db.VarChar(1000)
  canceledAt      DateTime?
  
  patientId       Int
  doctorId        Int
  serviceId       Int

  patient         Users                 @relation("PatientAppointments", fields: [patientId], references: [id], onDelete: Restrict)
  doctor          Users                 @relation("DoctorAppointments", fields: [doctorId], references: [id], onDelete: Restrict)
  service         Services              @relation(fields: [serviceId], references: [id], onDelete: Restrict)

  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
}
